
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 09 21:30:54 EEST 2023
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.objectweb.asm.Type;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 09 21:30:54 EEST 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\011\000\002\006\004\000\002\006\005" +
    "\000\002\006\002\000\002\005\006\000\002\005\005\000" +
    "\002\024\003\000\002\024\005\000\002\010\003\000\002" +
    "\010\003\000\002\011\006\000\002\011\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\004" +
    "\000\002\014\002\000\002\015\007\000\002\012\004\000" +
    "\002\007\003\000\002\007\003\000\002\025\002\000\002" +
    "\025\006\000\002\016\004\000\002\017\003\000\002\017" +
    "\006\000\002\017\003\000\002\017\004\000\002\017\007" +
    "\000\002\017\006\000\002\017\010\000\002\017\006\000" +
    "\002\017\005\000\002\017\004\000\002\021\005\000\002" +
    "\020\004\000\002\020\002\000\002\022\007\000\002\027" +
    "\005\000\002\027\002\000\002\023\003\000\002\023\003" +
    "\000\002\023\006\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\005\000\002" +
    "\026\004\000\002\026\004\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\030\005\000\002\030\004\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\014\006\001\002\000\004\002\222\001" +
    "\002\000\004\002\000\001\002\000\004\024\171\001\002" +
    "\000\010\014\006\023\010\034\uffee\001\002\000\004\024" +
    "\153\001\002\000\010\014\ufff2\023\ufff2\034\ufff2\001\002" +
    "\000\010\014\ufff0\023\ufff0\034\ufff0\001\002\000\004\034" +
    "\021\001\002\000\010\014\006\023\010\034\uffee\001\002" +
    "\000\010\014\ufff1\023\ufff1\034\ufff1\001\002\000\012\014" +
    "\006\023\010\032\017\034\uffee\001\002\000\010\014\uffe7" +
    "\023\uffe7\034\uffe7\001\002\000\004\034\uffef\001\002\000" +
    "\024\007\033\013\024\015\031\022\036\024\034\026\027" +
    "\032\032\034\021\035\uffda\001\002\000\012\002\uffff\014" +
    "\uffff\023\uffff\034\uffff\001\002\000\004\035\151\001\002" +
    "\000\022\006\107\024\034\025\047\026\027\027\044\030" +
    "\111\053\041\054\037\001\002\000\024\007\033\013\024" +
    "\015\031\022\036\024\034\026\027\032\032\034\021\035" +
    "\uffda\001\002\000\026\007\uffe4\013\uffe4\015\uffe4\016\uffe4" +
    "\022\uffe4\024\uffe4\026\uffe4\032\uffe4\034\uffe4\035\uffe4\001" +
    "\002\000\054\004\uffd5\005\uffd5\012\uffd5\017\uffd5\031\uffd5" +
    "\032\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\001\002\000\006\036\066\047" +
    "\142\001\002\000\022\006\107\024\034\025\047\026\027" +
    "\027\044\030\111\053\041\054\037\001\002\000\026\007" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\022\uffe6\024\uffe6\026\uffe6" +
    "\032\uffe6\034\uffe6\035\uffe6\001\002\000\004\030\102\001" +
    "\002\000\056\004\uffd6\005\uffd6\012\uffd6\017\uffd6\030\073" +
    "\031\uffd6\032\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\001\002\000\004\032" +
    "\072\001\002\000\022\024\034\025\047\026\027\027\044" +
    "\030\046\032\042\053\041\054\037\001\002\000\020\024" +
    "\034\025\047\026\027\027\044\030\046\053\041\054\037" +
    "\001\002\000\052\004\uffd1\005\uffd1\012\uffd1\017\uffd1\031" +
    "\uffd1\032\uffd1\036\066\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\001\002\000\020\024\034\025\047" +
    "\026\027\027\044\030\046\053\041\054\037\001\002\000" +
    "\026\007\uffdd\013\uffdd\015\uffdd\016\uffdd\022\uffdd\024\uffdd" +
    "\026\uffdd\032\uffdd\034\uffdd\035\uffdd\001\002\000\050\004" +
    "\uffd0\005\uffd0\012\uffd0\017\uffd0\031\uffd0\032\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\001\002" +
    "\000\050\004\uffd2\005\uffd2\012\uffd2\017\uffd2\031\uffd2\032" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\001\002\000\016\032\064\050\056\051\055\052\051" +
    "\053\053\054\054\001\002\000\020\024\034\025\047\026" +
    "\027\027\044\030\046\053\041\054\037\001\002\000\050" +
    "\004\uffd3\005\uffd3\012\uffd3\017\uffd3\031\uffd3\032\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\001" +
    "\002\000\016\031\052\050\056\051\055\052\051\053\053" +
    "\054\054\001\002\000\020\024\034\025\047\026\027\027" +
    "\044\030\046\053\041\054\037\001\002\000\050\004\uffcf" +
    "\005\uffcf\012\uffcf\017\uffcf\031\uffcf\032\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000" +
    "\020\024\034\025\047\026\027\027\044\030\046\053\041" +
    "\054\037\001\002\000\020\024\034\025\047\026\027\027" +
    "\044\030\046\053\041\054\037\001\002\000\020\024\034" +
    "\025\047\026\027\027\044\030\046\053\041\054\037\001" +
    "\002\000\020\024\034\025\047\026\027\027\044\030\046" +
    "\053\041\054\037\001\002\000\050\004\uffca\005\uffca\012" +
    "\uffca\017\uffca\031\uffca\032\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\001\002\000\050\004\uffc9" +
    "\005\uffc9\012\uffc9\017\uffc9\031\uffc9\032\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\001\002\000" +
    "\050\004\uffcb\005\uffcb\012\uffcb\017\uffcb\031\uffcb\032\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\050\056\051\055\052\051\053\uffcb\054\uffcb" +
    "\001\002\000\050\004\uffcc\005\uffcc\012\uffcc\017\uffcc\031" +
    "\uffcc\032\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\050\056\051\055\052\051\053" +
    "\uffcc\054\uffcc\001\002\000\050\004\uffc8\005\uffc8\012\uffc8" +
    "\017\uffc8\031\uffc8\032\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\001\002\000\026\007\uffde\013" +
    "\uffde\015\uffde\016\uffde\022\uffde\024\uffde\026\uffde\032\uffde" +
    "\034\uffde\035\uffde\001\002\000\050\004\uffce\005\uffce\012" +
    "\uffce\017\uffce\031\uffce\032\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\050\056\051" +
    "\055\052\051\053\uffce\054\uffce\001\002\000\020\024\034" +
    "\025\047\026\027\027\044\030\046\053\041\054\037\001" +
    "\002\000\016\037\070\050\056\051\055\052\051\053\053" +
    "\054\054\001\002\000\054\004\uffd4\005\uffd4\012\uffd4\017" +
    "\uffd4\031\uffd4\032\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\001\002\000\050" +
    "\004\uffcd\005\uffcd\012\uffcd\017\uffcd\031\uffcd\032\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\050\056\051\055\052\051\053\uffcd\054\uffcd\001" +
    "\002\000\026\007\uffe3\013\uffe3\015\uffe3\016\uffe3\022\uffe3" +
    "\024\uffe3\026\uffe3\032\uffe3\034\uffe3\035\uffe3\001\002\000" +
    "\020\024\034\025\047\026\027\027\044\030\046\053\041" +
    "\054\037\001\002\000\020\031\uffd7\040\075\050\056\051" +
    "\055\052\051\053\053\054\054\001\002\000\020\024\034" +
    "\025\047\026\027\027\044\030\046\053\041\054\037\001" +
    "\002\000\004\031\077\001\002\000\050\004\uffd9\005\uffd9" +
    "\012\uffd9\017\uffd9\031\uffd9\032\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\001\002\000\020\031" +
    "\uffd7\040\075\050\056\051\055\052\051\053\053\054\054" +
    "\001\002\000\004\031\uffd8\001\002\000\020\024\034\025" +
    "\047\026\027\027\044\030\046\053\041\054\037\001\002" +
    "\000\016\031\104\050\056\051\055\052\051\053\053\054" +
    "\054\001\002\000\004\032\105\001\002\000\026\007\uffe2" +
    "\013\uffe2\015\uffe2\016\uffe2\022\uffe2\024\uffe2\026\uffe2\032" +
    "\uffe2\034\uffe2\035\uffe2\001\002\000\010\004\131\005\132" +
    "\017\136\001\002\000\022\006\107\024\034\025\047\026" +
    "\027\027\044\030\111\053\041\054\037\001\002\000\030" +
    "\041\116\042\115\043\121\044\120\045\114\046\117\050" +
    "\056\051\055\052\051\053\053\054\054\001\002\000\022" +
    "\006\107\024\034\025\047\026\027\027\044\030\111\053" +
    "\041\054\037\001\002\000\010\004\131\005\132\031\130" +
    "\001\002\000\032\031\052\041\116\042\115\043\121\044" +
    "\120\045\114\046\117\050\056\051\055\052\051\053\053" +
    "\054\054\001\002\000\020\024\034\025\047\026\027\027" +
    "\044\030\046\053\041\054\037\001\002\000\020\024\034" +
    "\025\047\026\027\027\044\030\046\053\041\054\037\001" +
    "\002\000\020\024\034\025\047\026\027\027\044\030\046" +
    "\053\041\054\037\001\002\000\020\024\034\025\047\026" +
    "\027\027\044\030\046\053\041\054\037\001\002\000\020" +
    "\024\034\025\047\026\027\027\044\030\046\053\041\054" +
    "\037\001\002\000\020\024\034\025\047\026\027\027\044" +
    "\030\046\053\041\054\037\001\002\000\026\004\uffbf\005" +
    "\uffbf\012\uffbf\017\uffbf\031\uffbf\050\056\051\055\052\051" +
    "\053\053\054\054\001\002\000\026\004\uffbe\005\uffbe\012" +
    "\uffbe\017\uffbe\031\uffbe\050\056\051\055\052\051\053\053" +
    "\054\054\001\002\000\026\004\uffc0\005\uffc0\012\uffc0\017" +
    "\uffc0\031\uffc0\050\056\051\055\052\051\053\053\054\054" +
    "\001\002\000\026\004\uffc3\005\uffc3\012\uffc3\017\uffc3\031" +
    "\uffc3\050\056\051\055\052\051\053\053\054\054\001\002" +
    "\000\026\004\uffc2\005\uffc2\012\uffc2\017\uffc2\031\uffc2\050" +
    "\056\051\055\052\051\053\053\054\054\001\002\000\026" +
    "\004\uffc1\005\uffc1\012\uffc1\017\uffc1\031\uffc1\050\056\051" +
    "\055\052\051\053\053\054\054\001\002\000\014\004\uffc7" +
    "\005\uffc7\012\uffc7\017\uffc7\031\uffc7\001\002\000\022\006" +
    "\107\024\034\025\047\026\027\027\044\030\111\053\041" +
    "\054\037\001\002\000\022\006\107\024\034\025\047\026" +
    "\027\027\044\030\111\053\041\054\037\001\002\000\014" +
    "\004\131\005\uffc4\012\uffc4\017\uffc4\031\uffc4\001\002\000" +
    "\014\004\uffc5\005\uffc5\012\uffc5\017\uffc5\031\uffc5\001\002" +
    "\000\014\004\uffc6\005\uffc6\012\uffc6\017\uffc6\031\uffc6\001" +
    "\002\000\022\007\033\013\024\015\031\022\036\024\034" +
    "\026\027\032\032\034\021\001\002\000\026\007\uffe1\013" +
    "\uffe1\015\uffe1\016\140\022\uffe1\024\uffe1\026\uffe1\032\uffe1" +
    "\034\uffe1\035\uffe1\001\002\000\022\007\033\013\024\015" +
    "\031\022\036\024\034\026\027\032\032\034\021\001\002" +
    "\000\026\007\uffe0\013\uffe0\015\uffe0\016\uffe0\022\uffe0\024" +
    "\uffe0\026\uffe0\032\uffe0\034\uffe0\035\uffe0\001\002\000\020" +
    "\024\034\025\047\026\027\027\044\030\046\053\041\054" +
    "\037\001\002\000\016\032\144\050\056\051\055\052\051" +
    "\053\053\054\054\001\002\000\026\007\uffe5\013\uffe5\015" +
    "\uffe5\016\uffe5\022\uffe5\024\uffe5\026\uffe5\032\uffe5\034\uffe5" +
    "\035\uffe5\001\002\000\004\035\uffdb\001\002\000\010\004" +
    "\131\005\132\012\147\001\002\000\022\007\033\013\024" +
    "\015\031\022\036\024\034\026\027\032\032\034\021\001" +
    "\002\000\026\007\uffdf\013\uffdf\015\uffdf\016\uffdf\022\uffdf" +
    "\024\uffdf\026\uffdf\032\uffdf\034\uffdf\035\uffdf\001\002\000" +
    "\034\002\uffdc\007\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\026\uffdc\032\uffdc\034\uffdc\035" +
    "\uffdc\001\002\000\004\033\156\001\002\000\006\033\ufff8" +
    "\040\154\001\002\000\004\024\153\001\002\000\004\033" +
    "\ufff7\001\002\000\006\010\160\011\162\001\002\000\004" +
    "\032\170\001\002\000\022\014\uffea\021\uffea\023\uffea\024" +
    "\uffea\031\uffea\032\uffea\034\uffea\036\uffea\001\002\000\006" +
    "\032\uffe9\036\164\001\002\000\022\014\uffeb\021\uffeb\023" +
    "\uffeb\024\uffeb\031\uffeb\032\uffeb\034\uffeb\036\uffeb\001\002" +
    "\000\004\032\uffec\001\002\000\004\025\165\001\002\000" +
    "\004\037\166\001\002\000\014\021\uffe9\024\uffe9\031\uffe9" +
    "\032\uffe9\036\164\001\002\000\012\021\uffe8\024\uffe8\031" +
    "\uffe8\032\uffe8\001\002\000\010\014\uffed\023\uffed\034\uffed" +
    "\001\002\000\004\030\172\001\002\000\012\021\174\024" +
    "\153\031\ufffb\032\173\001\002\000\006\021\174\024\153" +
    "\001\002\000\004\024\153\001\002\000\004\031\210\001" +
    "\002\000\004\033\201\001\002\000\012\021\174\024\153" +
    "\031\ufffb\032\173\001\002\000\004\031\ufffd\001\002\000" +
    "\006\010\160\011\162\001\002\000\012\021\ufff9\024\ufff9" +
    "\031\ufff9\032\ufff9\001\002\000\014\021\uffe9\024\uffe9\031" +
    "\uffe9\032\uffe9\036\205\001\002\000\012\021\ufff3\024\ufff3" +
    "\031\ufff3\032\ufff3\001\002\000\006\025\165\037\206\001" +
    "\002\000\014\021\uffe9\024\uffe9\031\uffe9\032\uffe9\036\164" +
    "\001\002\000\012\021\ufff4\024\ufff4\031\ufff4\032\ufff4\001" +
    "\002\000\004\033\211\001\002\000\010\010\160\011\162" +
    "\020\212\001\002\000\012\014\ufff5\023\ufff5\032\ufff5\034" +
    "\ufff5\001\002\000\012\014\ufff6\023\ufff6\032\ufff6\034\ufff6" +
    "\001\002\000\012\014\ufffe\023\ufffe\032\ufffe\034\ufffe\001" +
    "\002\000\004\033\216\001\002\000\006\010\160\011\162" +
    "\001\002\000\012\021\ufffa\024\ufffa\031\ufffa\032\ufffa\001" +
    "\002\000\012\021\174\024\153\031\ufffb\032\173\001\002" +
    "\000\004\031\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\010\004\015\013\013\014\012\015\011\016\014\001" +
    "\001\000\004\024\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\021\001\001\000\016\003\010\004" +
    "\015\013\013\014\017\015\011\016\014\001\001\000\002" +
    "\001\001\000\016\003\010\004\015\013\013\014\012\015" +
    "\011\016\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\024\020\022\021\025\022\034\023\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\042" +
    "\023\037\026\107\030\145\001\001\000\014\017\024\020" +
    "\144\021\025\022\034\023\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\042\023" +
    "\037\026\107\030\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\042\023\037\026\044\001\001\000\010\022\042\023\037" +
    "\026\070\001\001\000\002\001\001\000\010\022\042\023" +
    "\037\026\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\042\023" +
    "\037\026\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\042\023\037\026\062\001\001\000\002\001" +
    "\001\000\010\022\042\023\037\026\061\001\001\000\010" +
    "\022\042\023\037\026\060\001\001\000\010\022\042\023" +
    "\037\026\057\001\001\000\010\022\042\023\037\026\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\042\023\037\026\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\042\023\037\026\073\001" +
    "\001\000\004\027\075\001\001\000\010\022\042\023\037" +
    "\026\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\100\001\001\000\002\001\001\000\010\022\042" +
    "\023\037\026\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\042" +
    "\023\037\026\107\030\134\001\001\000\002\001\001\000" +
    "\012\022\042\023\037\026\112\030\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\042\023\037\026" +
    "\126\001\001\000\010\022\042\023\037\026\125\001\001" +
    "\000\010\022\042\023\037\026\124\001\001\000\010\022" +
    "\042\023\037\026\123\001\001\000\010\022\042\023\037" +
    "\026\122\001\001\000\010\022\042\023\037\026\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\042\023\037\026\107\030\133" +
    "\001\001\000\012\022\042\023\037\026\107\030\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\136\021\025\022\034\023\027\001\001\000" +
    "\002\001\001\000\012\017\140\021\025\022\034\023\027" +
    "\001\001\000\002\001\001\000\010\022\042\023\037\026" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\147\021\025\022" +
    "\034\023\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\154\001" +
    "\001\000\002\001\001\000\006\007\160\012\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\176" +
    "\006\174\024\175\001\001\000\006\005\217\024\175\001" +
    "\001\000\004\024\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\176\006\177\024\175\001\001\000" +
    "\002\001\001\000\006\007\202\011\201\001\001\000\002" +
    "\001\001\000\004\025\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\212\010\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\202\011\216\001\001\000\002\001" +
    "\001\000\010\005\176\006\220\024\175\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info)
    {
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception
    {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond ::= expr GEQ expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryCondition(Operator.GEQ, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond ::= expr LEQ expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryCondition(Operator.LEQ, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond ::= expr GTHAN expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryCondition(Operator.GTHAN, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond ::= expr LTHAN expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryCondition(Operator.LTHAN, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= expr NEQ expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryCondition(Operator.NEQ, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= expr EQ expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryCondition(Operator.EQ, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond ::= cond OR cond 
            {
              Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryCondition(Operator.OR, c1, c2);
                RESULT.setLine(c1left);
                RESULT.setColumn(c1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= cond AND cond 
            {
              Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryCondition(Operator.AND, c1, c2);
                RESULT.setLine(c1left);
                RESULT.setColumn(c1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= NOT cond 
            {
              Condition RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new UnaryCondition(Operator.NOT, c);
                RESULT.setLine(nleft);
                RESULT.setColumn(nright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= LPAREN cond RPAREN 
            {
              Condition RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new ParenthesisCondition(c);
                RESULT.setLine(lpleft);
                RESULT.setColumn(lpright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryExpression(Operator.MOD, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryExpression(Operator.DIV, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr TIMES expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryExpression(Operator.TIMES, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryExpression(Operator.MINUS, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new BinaryExpression(Operator.PLUS, e1, e2);
                RESULT.setLine(e1left);
                RESULT.setColumn(e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new UnaryExpression(Operator.MINUS, e);
                RESULT.setLine(mleft);
                RESULT.setColumn(mright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= PLUS expr 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new UnaryExpression(Operator.PLUS, e);
                RESULT.setLine(pleft);
                RESULT.setColumn(pright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new ParenthesisExpression(e);
                RESULT.setLine(lpleft);
                RESULT.setColumn(lpright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= func_call 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression fc = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = fc;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= l_value 
            {
              Expression RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression lv = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = lv;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= CHAR_LITERAL 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String c = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new CharLiteralExpression(c);
                RESULT.setLine(cleft);
                RESULT.setColumn(cright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Integer l = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new IntegerLiteralExpression(l);
                RESULT.setLine(lleft);
                RESULT.setColumn(lright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // l_value ::= l_value LBRACKET expr RBRACKET 
            {
              Expression RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression lv = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LValueExpression(lv, e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // l_value ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new StringLiteralExpression(s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // l_value ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new IdentifierExpression(i);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprs ::= 
            {
              List<Expression> RESULT =null;
		  RESULT = new ArrayList<Expression>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprs ::= COMMA expr exprs 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> es = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                es.add(e);
                RESULT = es;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // func_call ::= IDENTIFIER LPAREN expr exprs RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> es = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new FunctionCallExpression(i, e, es);
                RESULT.setLine(ileft);
                RESULT.setColumn(iright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmts ::= 
            {
              List<Statement> RESULT =null;
		  RESULT = new ArrayList<Statement>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmts ::= stmt stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ss.add(s);
                RESULT = ss;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block ::= LCURLY stmts RCURLY 
            {
              Statement RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementGroup(ss);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= RETURN SEMICOLON 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new ReturnStatement();
                RESULT.setLine(rleft);
                RESULT.setColumn(rright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= RETURN expr SEMICOLON 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new ReturnStatement(e);
                RESULT.setLine(rleft);
                RESULT.setColumn(rright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE cond DO stmt 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new WhileStatement(c, s);
                RESULT.setLine(wleft);
                RESULT.setColumn(wright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF cond THEN stmt ELSE stmt 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new IfElseStatement(c, s1, s2);
                RESULT.setLine(ileft);
                RESULT.setColumn(iright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF cond THEN stmt 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new IfStatement(c, s);
                RESULT.setLine(ileft);
                RESULT.setColumn(iright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= PUTS LPAREN expr RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT = new PutsStatement(e);
                RESULT.setLine(pleft);
                RESULT.setColumn(pright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= func_call SEMICOLON 
            {
              Statement RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression fc = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new FunctionCallStatement(fc);
                RESULT.setLine(fcleft);
                RESULT.setColumn(fcright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = b;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= l_value SPACER expr SEMICOLON 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression lv = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new SpacerStatement(lv, e);
                RESULT.setLine(lvleft);
                RESULT.setColumn(lvright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new EmptyStatement();
                RESULT.setLine(sleft);
                RESULT.setColumn(sright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // func_decl ::= header SEMICOLON 
            {
              Definition RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Definition h = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = h;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arrays ::= LBRACKET INTEGER_LITERAL RBRACKET arrays 
            {
              List<Integer> RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.Integer l = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Integer> as = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                as.add(l);
                RESULT = as;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrays",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arrays ::= 
            {
              List<Integer> RESULT =null;
		  RESULT = new ArrayList<Integer>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrays",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= CHAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Type.CHAR_TYPE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Type.INT_TYPE;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= data_type arrays 
            {
              Type RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type dt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Integer> as = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayType o = new ArrayType(dt, as);
                RESULT = o.getArrayType();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_def ::= VAR ids COLON type SEMICOLON 
            {
              Definition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> is = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new VariableDefinition(is, t);
                RESULT.setLine(vleft);
                RESULT.setColumn(vright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_defs ::= 
            {
              List<Definition> RESULT =null;
		  RESULT = new ArrayList<Definition>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_defs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_defs ::= local_def local_defs 
            {
              List<Definition> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Definition ld = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Definition> lds = (List<Definition>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                lds.add(ld);
                RESULT = lds;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_defs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // local_def ::= var_def 
            {
              Definition RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Definition vd = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = vd;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // local_def ::= func_decl 
            {
              Definition RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Definition fl = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = fl;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // local_def ::= func_def 
            {
              Definition RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Definition fd = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = fd;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fpar_type ::= data_type arrays 
            {
              Type RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type dt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Integer> as = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayType o = new ArrayType(dt, as, false);
                RESULT = o.getArrayType();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fpar_type ::= data_type LBRACKET RBRACKET arrays 
            {
              Type RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type dt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Integer> as = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayType o = new ArrayType(dt, as, true);
                RESULT = o.getArrayType();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ret_type ::= NOTHING 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Type.VOID_TYPE;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ret_type ::= data_type 
            {
              Type RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type dt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = dt;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ids ::= IDENTIFIER COMMA ids 
            {
              List<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> is = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                is.add(i);
                RESULT = is;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ids ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArrayList<String>();
                RESULT.add(i);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fpar_def ::= ids COLON fpar_type 
            {
              Definition RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> is = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type ft = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunctionParameterDefinition(ft, is, false);
                RESULT.setLine(isleft);
                RESULT.setColumn(isright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fpar_def ::= REF ids COLON fpar_type 
            {
              Definition RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> is = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type ft = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunctionParameterDefinition(ft, is, true);
                RESULT.setLine(rleft);
                RESULT.setColumn(rright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fpar_defs ::= 
            {
              List<Definition> RESULT =null;
		  RESULT = new ArrayList<Definition>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fpar_defs ::= SEMICOLON fpar_def fpar_defs 
            {
              List<Definition> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Definition fd = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Definition> fds = (List<Definition>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArrayList<Definition>();
                RESULT.add(fd);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fpar_defs ::= fpar_def fpar_defs 
            {
              List<Definition> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Definition fd = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Definition> fds = (List<Definition>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                fds.add(fd);
                RESULT = fds;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= FUN IDENTIFIER LPAREN fpar_defs RPAREN COLON ret_type 
            {
              Definition RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Definition> fds = (List<Definition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type rt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new HeaderDefinition(rt, i, fds);
                RESULT.setLine(fleft);
                RESULT.setColumn(fright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_def ::= header local_defs block 
            {
              Definition RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Definition h = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Definition> ls = (List<Definition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunctionDefinition(h, ls, b);
                RESULT.setLine(hleft);
                RESULT.setColumn(hright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= func_def 
            {
              Program RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Definition fd = (Definition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Program(fd);
                RESULT.setLine(fdleft);
                RESULT.setColumn(fdright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

