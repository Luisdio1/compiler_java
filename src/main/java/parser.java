
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 28 21:10:52 EEST 2023
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 28 21:10:52 EEST 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\002\000\002\002" +
    "\003\000\002\003\005\000\002\003\004\000\002\004\011" +
    "\000\002\010\005\000\002\010\003\000\002\010\002\000" +
    "\002\011\006\000\002\011\005\000\002\013\005\000\002" +
    "\013\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\004\000\002\017\002\000\002\017\006\000\002\012\003" +
    "\000\002\012\003\000\002\014\006\000\002\014\004\000" +
    "\002\005\003\000\002\005\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\020\004\000\002\021" +
    "\007\000\002\022\003\000\002\022\004\000\002\023\003" +
    "\000\002\023\007\000\002\023\006\000\002\023\006\000" +
    "\002\023\003\000\002\023\004\000\002\023\006\000\002" +
    "\023\010\000\002\023\006\000\002\023\005\000\002\023" +
    "\004\000\002\007\005\000\002\024\005\000\002\024\006" +
    "\000\002\026\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\006\000\002\027\006\000\002\027\003\000\002\027" +
    "\005\000\002\027\004\000\002\027\004\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\025\005\000\002\025\004\000\002\025\005" +
    "\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\002\000\014\006\001\002\000\004\002" +
    "\225\001\002\000\004\002\uffff\001\002\000\004\024\176" +
    "\001\002\000\010\014\006\023\016\031\020\001\002\000" +
    "\010\014\uffeb\023\uffeb\031\uffeb\001\002\000\010\014\uffe7" +
    "\023\uffe7\031\uffe7\001\002\000\012\002\ufffd\014\ufffd\023" +
    "\ufffd\031\ufffd\001\002\000\010\014\006\023\016\031\020" +
    "\001\002\000\012\014\006\023\016\027\173\031\020\001" +
    "\002\000\010\014\uffe8\023\uffe8\031\uffe8\001\002\000\004" +
    "\024\155\001\002\000\010\014\uffe9\023\uffe9\031\uffe9\001" +
    "\002\000\022\007\030\013\021\015\026\022\033\024\032" +
    "\027\027\031\020\053\025\001\002\000\006\006\126\025" +
    "\130\001\002\000\024\007\030\013\021\015\026\022\033" +
    "\024\032\027\027\031\020\032\150\053\025\001\002\000" +
    "\024\007\uffe4\013\uffe4\015\uffe4\022\uffe4\024\uffe4\027\uffe4" +
    "\031\uffe4\032\uffe4\053\uffe4\001\002\000\026\007\uffde\013" +
    "\uffde\015\uffde\016\uffde\022\uffde\024\uffde\027\uffde\031\uffde" +
    "\032\uffde\053\uffde\001\002\000\004\044\144\001\002\000" +
    "\006\006\126\025\130\001\002\000\026\007\uffe2\013\uffe2" +
    "\015\uffe2\016\uffe2\022\uffe2\024\uffe2\027\uffe2\031\uffe2\032" +
    "\uffe2\053\uffe2\001\002\000\004\025\122\001\002\000\004" +
    "\027\121\001\002\000\006\025\077\044\116\001\002\000" +
    "\022\024\040\025\044\027\037\050\036\051\034\052\045" +
    "\053\035\054\043\001\002\000\020\024\040\025\044\050" +
    "\036\051\034\052\045\053\035\054\043\001\002\000\042" +
    "\026\uffcf\027\uffcf\033\112\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\001\002\000\020\024\040\025" +
    "\044\050\036\051\034\052\045\053\035\054\043\001\002" +
    "\000\026\007\uffd8\013\uffd8\015\uffd8\016\uffd8\022\uffd8\024" +
    "\uffd8\027\uffd8\031\uffd8\032\uffd8\053\uffd8\001\002\000\044" +
    "\025\077\026\uffd0\027\uffd0\033\100\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000\040\026" +
    "\uffcc\027\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\001\002\000\032\027\076\036\054\037\052" +
    "\040\062\041\061\042\050\043\055\045\060\046\056\047" +
    "\051\050\053\051\047\001\002\000\040\026\uffd1\027\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\001\002\000\020\024\040\025\044\050\036\051\034\052" +
    "\045\053\035\054\043\001\002\000\040\026\uffd2\027\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\001\002\000\032\026\057\036\054\037\052\040\062\041" +
    "\061\042\050\043\055\045\060\046\056\047\051\050\053" +
    "\051\047\001\002\000\020\024\040\025\044\050\036\051" +
    "\034\052\045\053\035\054\043\001\002\000\020\024\040" +
    "\025\044\050\036\051\034\052\045\053\035\054\043\001" +
    "\002\000\020\024\040\025\044\050\036\051\034\052\045" +
    "\053\035\054\043\001\002\000\020\024\040\025\044\050" +
    "\036\051\034\052\045\053\035\054\043\001\002\000\020" +
    "\024\040\025\044\050\036\051\034\052\045\053\035\054" +
    "\043\001\002\000\020\024\040\025\044\050\036\051\034" +
    "\052\045\053\035\054\043\001\002\000\020\024\040\025" +
    "\044\050\036\051\034\052\045\053\035\054\043\001\002" +
    "\000\020\024\040\025\044\050\036\051\034\052\045\053" +
    "\035\054\043\001\002\000\040\026\uffcb\027\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002" +
    "\000\020\024\040\025\044\050\036\051\034\052\045\053" +
    "\035\054\043\001\002\000\020\024\040\025\044\050\036" +
    "\051\034\052\045\053\035\054\043\001\002\000\020\024" +
    "\040\025\044\050\036\051\034\052\045\053\035\054\043" +
    "\001\002\000\024\026\uffbf\027\uffbf\034\uffbf\035\uffbf\045" +
    "\060\046\056\047\051\050\053\051\047\001\002\000\024" +
    "\026\uffbe\027\uffbe\034\uffbe\035\uffbe\045\060\046\056\047" +
    "\051\050\053\051\047\001\002\000\040\026\uffc6\027\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\001\002\000\040\026\uffc5\027\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\024\026" +
    "\uffc0\027\uffc0\034\uffc0\035\uffc0\045\060\046\056\047\051" +
    "\050\053\051\047\001\002\000\024\026\uffc3\027\uffc3\034" +
    "\uffc3\035\uffc3\045\060\046\056\047\051\050\053\051\047" +
    "\001\002\000\040\026\uffc8\027\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045\060" +
    "\046\056\047\051\050\uffc8\051\uffc8\001\002\000\024\026" +
    "\uffc2\027\uffc2\034\uffc2\035\uffc2\045\060\046\056\047\051" +
    "\050\053\051\047\001\002\000\040\026\uffc4\027\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\001" +
    "\002\000\024\026\uffc1\027\uffc1\034\uffc1\035\uffc1\045\060" +
    "\046\056\047\051\050\053\051\047\001\002\000\040\026" +
    "\uffc7\027\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\045\060\046\056\047\051\050" +
    "\uffc7\051\uffc7\001\002\000\026\007\uffd9\013\uffd9\015\uffd9" +
    "\016\uffd9\022\uffd9\024\uffd9\027\uffd9\031\uffd9\032\uffd9\053" +
    "\uffd9\001\002\000\022\024\040\025\044\026\104\050\036" +
    "\051\034\052\045\053\035\054\043\001\002\000\020\024" +
    "\040\025\044\050\036\051\034\052\045\053\035\054\043" +
    "\001\002\000\032\034\102\036\054\037\052\040\062\041" +
    "\061\042\050\043\055\045\060\046\056\047\051\050\053" +
    "\051\047\001\002\000\040\026\uffce\027\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\001\002\000" +
    "\004\026\110\001\002\000\040\026\uffd6\027\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002" +
    "\000\034\026\uffd3\035\106\036\054\037\052\040\062\041" +
    "\061\042\050\043\055\045\060\046\056\047\051\050\053" +
    "\051\047\001\002\000\020\024\040\025\044\050\036\051" +
    "\034\052\045\053\035\054\043\001\002\000\004\026\uffd4" +
    "\001\002\000\040\026\uffd5\027\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002\000\040\026" +
    "\uffca\027\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\045\060\046\056\047\051\050" +
    "\uffca\051\uffca\001\002\000\020\024\040\025\044\050\036" +
    "\051\034\052\045\053\035\054\043\001\002\000\032\034" +
    "\114\036\054\037\052\040\062\041\061\042\050\043\055" +
    "\045\060\046\056\047\051\050\053\051\047\001\002\000" +
    "\040\026\uffcd\027\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\001\002\000\040\026\uffc9\027\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\045\060\046\056\047\051\050\uffc9\051\uffc9" +
    "\001\002\000\020\024\040\025\044\050\036\051\034\052" +
    "\045\053\035\054\043\001\002\000\032\027\120\036\054" +
    "\037\052\040\062\041\061\042\050\043\055\045\060\046" +
    "\056\047\051\050\053\051\047\001\002\000\026\007\uffe0" +
    "\013\uffe0\015\uffe0\016\uffe0\022\uffe0\024\uffe0\027\uffe0\031" +
    "\uffe0\032\uffe0\053\uffe0\001\002\000\026\007\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\022\uffdd\024\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\053\uffdd\001\002\000\020\024\040\025\044\050\036" +
    "\051\034\052\045\053\035\054\043\001\002\000\032\026" +
    "\124\036\054\037\052\040\062\041\061\042\050\043\055" +
    "\045\060\046\056\047\051\050\053\051\047\001\002\000" +
    "\004\027\125\001\002\000\026\007\uffe1\013\uffe1\015\uffe1" +
    "\016\uffe1\022\uffe1\024\uffe1\027\uffe1\031\uffe1\032\uffe1\053" +
    "\uffe1\001\002\000\006\006\126\025\130\001\002\000\010" +
    "\004\133\005\134\017\137\001\002\000\006\006\126\025" +
    "\130\001\002\000\010\004\133\005\134\026\132\001\002" +
    "\000\014\004\uffbd\005\uffbd\012\uffbd\017\uffbd\026\uffbd\001" +
    "\002\000\006\006\126\025\130\001\002\000\006\006\126" +
    "\025\130\001\002\000\014\004\133\005\uffba\012\uffba\017" +
    "\uffba\026\uffba\001\002\000\014\004\uffbb\005\uffbb\012\uffbb" +
    "\017\uffbb\026\uffbb\001\002\000\022\007\030\013\021\015" +
    "\026\022\033\024\032\027\027\031\020\053\025\001\002" +
    "\000\026\007\uffdc\013\uffdc\015\uffdc\016\141\022\uffdc\024" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\053\uffdc\001\002\000\022" +
    "\007\030\013\021\015\026\022\033\024\032\027\027\031" +
    "\020\053\025\001\002\000\026\007\uffdb\013\uffdb\015\uffdb" +
    "\016\uffdb\022\uffdb\024\uffdb\027\uffdb\031\uffdb\032\uffdb\053" +
    "\uffdb\001\002\000\014\004\uffbc\005\uffbc\012\uffbc\017\uffbc" +
    "\026\uffbc\001\002\000\020\024\040\025\044\050\036\051" +
    "\034\052\045\053\035\054\043\001\002\000\032\027\146" +
    "\036\054\037\052\040\062\041\061\042\050\043\055\045" +
    "\060\046\056\047\051\050\053\051\047\001\002\000\026" +
    "\007\uffdf\013\uffdf\015\uffdf\016\uffdf\022\uffdf\024\uffdf\027" +
    "\uffdf\031\uffdf\032\uffdf\053\uffdf\001\002\000\024\007\uffe3" +
    "\013\uffe3\015\uffe3\022\uffe3\024\uffe3\027\uffe3\031\uffe3\032" +
    "\uffe3\053\uffe3\001\002\000\034\002\uffd7\007\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\022\uffd7\023\uffd7\024\uffd7\027" +
    "\uffd7\031\uffd7\032\uffd7\053\uffd7\001\002\000\010\004\133" +
    "\005\134\012\152\001\002\000\022\007\030\013\021\015" +
    "\026\022\033\024\032\027\027\031\020\053\025\001\002" +
    "\000\026\007\uffda\013\uffda\015\uffda\016\uffda\022\uffda\024" +
    "\uffda\027\uffda\031\uffda\032\uffda\053\uffda\001\002\000\004" +
    "\030\160\001\002\000\006\030\ufff5\035\156\001\002\000" +
    "\004\024\155\001\002\000\004\030\ufff6\001\002\000\006" +
    "\010\162\011\164\001\002\000\004\027\172\001\002\000" +
    "\016\014\ufff3\023\ufff3\026\ufff3\027\ufff3\031\ufff3\033\ufff3" +
    "\001\002\000\006\027\ufff1\033\165\001\002\000\016\014" +
    "\ufff4\023\ufff4\026\ufff4\027\ufff4\031\ufff4\033\ufff4\001\002" +
    "\000\004\052\167\001\002\000\004\027\ufff2\001\002\000" +
    "\004\034\170\001\002\000\010\026\ufff1\027\ufff1\033\165" +
    "\001\002\000\006\026\ufff0\027\ufff0\001\002\000\010\014" +
    "\uffe5\023\uffe5\031\uffe5\001\002\000\010\014\uffe6\023\uffe6" +
    "\031\uffe6\001\002\000\010\014\uffea\023\uffea\031\uffea\001" +
    "\002\000\012\002\ufffe\014\ufffe\023\ufffe\031\ufffe\001\002" +
    "\000\004\025\177\001\002\000\010\021\200\024\155\026" +
    "\ufff9\001\002\000\004\024\155\001\002\000\004\026\215" +
    "\001\002\000\004\030\206\001\002\000\006\026\ufffa\027" +
    "\204\001\002\000\010\021\200\024\155\026\ufff9\001\002" +
    "\000\004\026\ufffb\001\002\000\006\010\162\011\164\001" +
    "\002\000\010\026\ufff1\027\ufff1\033\211\001\002\000\006" +
    "\026\ufff7\027\ufff7\001\002\000\006\034\213\052\167\001" +
    "\002\000\006\026\uffec\027\uffec\001\002\000\010\026\ufff1" +
    "\027\ufff1\033\165\001\002\000\006\026\uffed\027\uffed\001" +
    "\002\000\004\030\216\001\002\000\010\010\162\011\164" +
    "\020\217\001\002\000\012\014\uffee\023\uffee\027\uffee\031" +
    "\uffee\001\002\000\012\014\uffef\023\uffef\027\uffef\031\uffef" +
    "\001\002\000\012\014\ufffc\023\ufffc\027\ufffc\031\ufffc\001" +
    "\002\000\004\030\223\001\002\000\006\010\162\011\164" +
    "\001\002\000\006\026\ufff8\027\ufff8\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\016\004\013\005\012\006\007\007\011\020\014\021" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\016\004\013\006\173\007\174\020" +
    "\014\021\010\001\001\000\020\003\016\004\013\005\012" +
    "\006\007\007\011\020\014\021\010\001\001\000\002\001" +
    "\001\000\004\013\153\001\001\000\002\001\001\000\012" +
    "\007\023\022\021\023\022\024\030\001\001\000\004\025" +
    "\150\001\001\000\010\007\023\023\146\024\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\040\027" +
    "\041\001\001\000\006\024\040\027\114\001\001\000\002" +
    "\001\001\000\006\024\040\027\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\040\027\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\040\027\074" +
    "\001\001\000\006\024\040\027\073\001\001\000\006\024" +
    "\040\027\072\001\001\000\006\024\040\027\071\001\001" +
    "\000\006\024\040\027\070\001\001\000\006\024\040\027" +
    "\067\001\001\000\006\024\040\027\066\001\001\000\006" +
    "\024\040\027\065\001\001\000\002\001\001\000\006\024" +
    "\040\027\064\001\001\000\006\024\040\027\063\001\001" +
    "\000\006\024\040\027\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\040\026\102\027\104\001" +
    "\001\000\006\024\040\027\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\040\026\106\027\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\040\027\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\040\027\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\040\027\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\142\001\001" +
    "\000\002\001\001\000\004\025\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\135\001\001\000\004" +
    "\025\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\023\023\137\024\030\001\001\000\002\001\001" +
    "\000\010\007\023\023\141\024\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\040\027\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\023\023\152" +
    "\024\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\156\001\001\000\002\001\001" +
    "\000\006\015\162\016\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\200\011\202\013\201\001\001" +
    "\000\004\013\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\204\011\202\013\201" +
    "\001\001\000\002\001\001\000\006\014\207\015\206\001" +
    "\001\000\004\017\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\220\015\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\223\015\206\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info)
    {
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception
    {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cond ::= cond OR cond 
            {
              Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryCondition(Operator.OR, c1, c2);
             RESULT.setLine(c1left);
             RESULT.setColumn(c1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond ::= cond AND cond 
            {
              Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryCondition(Operator.AND, c1, c2);
             RESULT.setLine(c1left);
             RESULT.setColumn(c1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond ::= NOT cond 
            {
              Condition RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new UnaryCondition(Operator.NOT, c);
             RESULT.setLine(nleft);
             RESULT.setColumn(nright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond ::= LPAREN cond RPAREN 
            {
              Condition RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = new ParenthesisCondition(c);
             RESULT.setLine(lpleft);
             RESULT.setColumn(lpright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr GEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.GEQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr LEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.LEQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr GTHAN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.GTHAN, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr LTHAN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.LTHAN, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr NEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.NEQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.EQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.MOD, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.DIV, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr TIMES expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.TIMES, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.MINUS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.PLUS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new UnaryExpression(Operator.MINUS, e);
             RESULT.setLine(mleft);
             RESULT.setColumn(mright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= PLUS expr 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new UnaryExpression(Operator.PLUS, e);
             RESULT.setLine(pleft);
             RESULT.setColumn(pright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = new ParenthesisExpression(e);
             RESULT.setLine(lpleft);
             RESULT.setColumn(lpright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= func_call 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= STRING_LITERAL LBRACKET expr RBRACKET 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= IDENTIFIER LBRACKET expr RBRACKET 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new StringLiteralExpression(s);
             RESULT.setLine(sleft);
             RESULT.setColumn(sright);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new IdentifierExpression(i);
             RESULT.setLine(ileft);
             RESULT.setColumn(iright);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= CHAR_LITERAL 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character c = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new CharLiteralExpression(c);
             RESULT.setLine(cleft);
             RESULT.setColumn(cright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Integer l = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new IntegerLiteralExpression(l);
             RESULT.setLine(lleft);
             RESULT.setColumn(lright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprs ::= expr 
            {
              List<Expression> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprs ::= expr COMMA exprs 
            {
              List<Expression> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // func_call ::= IDENTIFIER LPAREN exprs RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // func_call ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // block ::= LCURLY stmts RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= RETURN SEMICOLON 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= RETURN expr SEMICOLON 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= WHILE cond DO stmt 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= IF cond THEN stmt ELSE stmt 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= IF cond THEN stmt 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= func_call SEMICOLON 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= block 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= STRING_LITERAL SPACER expr SEMICOLON 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IDENTIFIER SPACER expr SEMICOLON 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= PUTS LPAREN expr RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
         RESULT = new PutsStatement(e);
         RESULT.setLine(pleft);
         RESULT.setColumn(pright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= SEMICOLON 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmts ::= stmts stmt 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          sl.add(s);
          RESULT = sl;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmts ::= stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new ArrayList<Statement>();
          RESULT.add(s);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_def ::= VAR ids COLON type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // func_decl ::= header SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // local_def ::= var_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // local_def ::= func_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // local_def ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // local_defs ::= local_defs local_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_defs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // local_defs ::= local_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_defs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fpar_type ::= data_type int_consts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fpar_type ::= data_type LBRACKET RBRACKET int_consts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ret_type ::= NOTHING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ret_type ::= data_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // int_consts ::= LBRACKET INTEGER_LITERAL RBRACKET int_consts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_consts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // int_consts ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_consts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= data_type int_consts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ids ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ids ::= IDENTIFIER COMMA ids 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fpar_def ::= ids COLON fpar_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_def",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fpar_def ::= REF ids COLON fpar_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_def",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fpar_defs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fpar_defs ::= fpar_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fpar_defs ::= fpar_def SEMICOLON fpar_defs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= FUN IDENTIFIER LPAREN fpar_defs RPAREN COLON ret_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // func_def ::= header block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_def ::= header local_defs block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= func_def 
            {
              Program RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Program(fd);
            RESULT.setLine(fdleft);
            RESULT.setColumn(fdright);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= 
            {
              Program RESULT =null;
		
            RESULT = new Program();
            RESULT.setLine(1);
            RESULT.setColumn(1);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

