
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 27 21:59:04 EEST 2023
//----------------------------------------------------

import java_cup.runtime.Symbol;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 27 21:59:04 EEST 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\011\000\002\010\005\000\002\010\003" +
    "\000\002\010\002\000\002\011\006\000\002\011\005\000" +
    "\002\013\005\000\002\013\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\004\000\002\017\006\000\002\017" +
    "\002\000\002\012\003\000\002\012\003\000\002\014\006" +
    "\000\002\014\004\000\002\005\004\000\002\005\002\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\020\004\000\002\021\007\000\002\022\004\000\002\022" +
    "\002\000\002\024\003\000\002\024\003\000\002\024\006" +
    "\000\002\023\003\000\002\023\006\000\002\023\003\000" +
    "\002\023\004\000\002\023\007\000\002\023\006\000\002" +
    "\023\005\000\002\031\002\000\002\031\004\000\002\032" +
    "\002\000\002\032\003\000\002\007\005\000\002\025\005" +
    "\000\002\025\006\000\002\027\005\000\002\027\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\005\000\002\030\004\000\002\030" +
    "\004\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\026\005\000" +
    "\002\026\004\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\013\006\001\002\000\004\002\211\001" +
    "\002\000\004\002\000\001\002\000\004\023\162\001\002" +
    "\000\010\013\uffec\022\uffec\030\uffec\001\002\000\010\013" +
    "\006\022\016\030\020\001\002\000\010\013\uffed\022\uffed" +
    "\030\uffed\001\002\000\012\002\uffff\013\uffff\022\uffff\030" +
    "\uffff\001\002\000\010\013\uffe9\022\uffe9\030\uffe9\001\002" +
    "\000\012\013\uffec\022\uffec\026\161\030\uffec\001\002\000" +
    "\010\013\uffea\022\uffea\030\uffea\001\002\000\004\023\144" +
    "\001\002\000\010\013\uffeb\022\uffeb\030\uffeb\001\002\000" +
    "\022\012\uffe5\014\uffe5\021\uffe5\023\uffe5\026\uffe5\030\uffe5" +
    "\031\uffe5\052\uffe5\001\002\000\022\012\022\014\027\021" +
    "\034\023\033\026\031\030\020\031\030\052\026\001\002" +
    "\000\022\006\101\023\033\024\103\047\037\050\035\051" +
    "\045\052\026\053\041\001\002\000\022\012\uffe6\014\uffe6" +
    "\021\uffe6\023\uffe6\026\uffe6\030\uffe6\031\uffe6\052\uffe6\001" +
    "\002\000\024\012\uffdf\014\uffdf\015\uffdf\021\uffdf\023\uffdf" +
    "\026\uffdf\030\uffdf\031\uffdf\052\uffdf\001\002\000\006\032" +
    "\064\043\135\001\002\000\054\004\uffe3\005\uffe3\011\uffe3" +
    "\016\uffe3\025\uffe3\026\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\001\002\000" +
    "\022\006\101\023\033\024\103\047\037\050\035\051\045" +
    "\052\026\053\041\001\002\000\032\002\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\021\uffd6\022\uffd6\023\uffd6\026\uffd6" +
    "\030\uffd6\031\uffd6\052\uffd6\001\002\000\024\012\uffe1\014" +
    "\uffe1\015\uffe1\021\uffe1\023\uffe1\026\uffe1\030\uffe1\031\uffe1" +
    "\052\uffe1\001\002\000\004\026\077\001\002\000\056\004" +
    "\uffe4\005\uffe4\011\uffe4\016\uffe4\024\070\025\uffe4\026\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\001\002\000\022\023\033\024\044\026" +
    "\uffd8\047\037\050\035\051\045\052\026\053\041\001\002" +
    "\000\020\023\033\024\044\047\037\050\035\051\045\052" +
    "\026\053\041\001\002\000\052\004\uffcf\005\uffcf\011\uffcf" +
    "\016\uffcf\025\uffcf\026\uffcf\032\064\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\020\023" +
    "\033\024\044\047\037\050\035\051\045\052\026\053\041" +
    "\001\002\000\050\004\uffce\005\uffce\011\uffce\016\uffce\025" +
    "\uffce\026\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\001\002\000\050\004\uffd0\005\uffd0\011\uffd0" +
    "\016\uffd0\025\uffd0\026\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\001\002\000\016\026\uffd7\044" +
    "\054\045\053\046\047\047\051\050\052\001\002\000\004" +
    "\026\062\001\002\000\020\023\033\024\044\047\037\050" +
    "\035\051\045\052\026\053\041\001\002\000\050\004\uffd1" +
    "\005\uffd1\011\uffd1\016\uffd1\025\uffd1\026\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\001\002\000" +
    "\016\025\050\044\054\045\053\046\047\047\051\050\052" +
    "\001\002\000\020\023\033\024\044\047\037\050\035\051" +
    "\045\052\026\053\041\001\002\000\050\004\uffcd\005\uffcd" +
    "\011\uffcd\016\uffcd\025\uffcd\026\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\020\023" +
    "\033\024\044\047\037\050\035\051\045\052\026\053\041" +
    "\001\002\000\020\023\033\024\044\047\037\050\035\051" +
    "\045\052\026\053\041\001\002\000\020\023\033\024\044" +
    "\047\037\050\035\051\045\052\026\053\041\001\002\000" +
    "\020\023\033\024\044\047\037\050\035\051\045\052\026" +
    "\053\041\001\002\000\050\004\uffc8\005\uffc8\011\uffc8\016" +
    "\uffc8\025\uffc8\026\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\001\002\000\050\004\uffc7\005\uffc7" +
    "\011\uffc7\016\uffc7\025\uffc7\026\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000\050\004" +
    "\uffc9\005\uffc9\011\uffc9\016\uffc9\025\uffc9\026\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\044\054\045\053\046\047\047\uffc9\050\uffc9\001\002" +
    "\000\050\004\uffca\005\uffca\011\uffca\016\uffca\025\uffca\026" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\044\054\045\053\046\047\047\uffca\050" +
    "\uffca\001\002\000\050\004\uffc6\005\uffc6\011\uffc6\016\uffc6" +
    "\025\uffc6\026\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\001\002\000\024\012\uffdb\014\uffdb\015" +
    "\uffdb\021\uffdb\023\uffdb\026\uffdb\030\uffdb\031\uffdb\052\uffdb" +
    "\001\002\000\050\004\uffcc\005\uffcc\011\uffcc\016\uffcc\025" +
    "\uffcc\026\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\044\054\045\053\046\047\047" +
    "\uffcc\050\uffcc\001\002\000\020\023\033\024\044\047\037" +
    "\050\035\051\045\052\026\053\041\001\002\000\016\033" +
    "\066\044\054\045\053\046\047\047\051\050\052\001\002" +
    "\000\054\004\uffe2\005\uffe2\011\uffe2\016\uffe2\025\uffe2\026" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\001\002\000\050\004\uffcb\005\uffcb" +
    "\011\uffcb\016\uffcb\025\uffcb\026\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\044\054" +
    "\045\053\046\047\047\uffcb\050\uffcb\001\002\000\022\023" +
    "\033\024\044\025\072\047\037\050\035\051\045\052\026" +
    "\053\041\001\002\000\004\025\076\001\002\000\050\004" +
    "\uffd5\005\uffd5\011\uffd5\016\uffd5\025\uffd5\026\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\001\002" +
    "\000\020\025\uffd2\034\074\044\054\045\053\046\047\047" +
    "\051\050\052\001\002\000\020\023\033\024\044\047\037" +
    "\050\035\051\045\052\026\053\041\001\002\000\004\025" +
    "\uffd3\001\002\000\050\004\uffd4\005\uffd4\011\uffd4\016\uffd4" +
    "\025\uffd4\026\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\001\002\000\024\012\uffde\014\uffde\015" +
    "\uffde\021\uffde\023\uffde\026\uffde\030\uffde\031\uffde\052\uffde" +
    "\001\002\000\010\004\123\005\124\016\130\001\002\000" +
    "\022\006\101\023\033\024\103\047\037\050\035\051\045" +
    "\052\026\053\041\001\002\000\030\035\110\036\107\037" +
    "\113\040\112\041\106\042\111\044\054\045\053\046\047" +
    "\047\051\050\052\001\002\000\022\006\101\023\033\024" +
    "\103\047\037\050\035\051\045\052\026\053\041\001\002" +
    "\000\010\004\123\005\124\025\122\001\002\000\032\025" +
    "\050\035\110\036\107\037\113\040\112\041\106\042\111" +
    "\044\054\045\053\046\047\047\051\050\052\001\002\000" +
    "\020\023\033\024\044\047\037\050\035\051\045\052\026" +
    "\053\041\001\002\000\020\023\033\024\044\047\037\050" +
    "\035\051\045\052\026\053\041\001\002\000\020\023\033" +
    "\024\044\047\037\050\035\051\045\052\026\053\041\001" +
    "\002\000\020\023\033\024\044\047\037\050\035\051\045" +
    "\052\026\053\041\001\002\000\020\023\033\024\044\047" +
    "\037\050\035\051\045\052\026\053\041\001\002\000\020" +
    "\023\033\024\044\047\037\050\035\051\045\052\026\053" +
    "\041\001\002\000\026\004\uffbd\005\uffbd\011\uffbd\016\uffbd" +
    "\025\uffbd\044\054\045\053\046\047\047\051\050\052\001" +
    "\002\000\026\004\uffbc\005\uffbc\011\uffbc\016\uffbc\025\uffbc" +
    "\044\054\045\053\046\047\047\051\050\052\001\002\000" +
    "\026\004\uffbe\005\uffbe\011\uffbe\016\uffbe\025\uffbe\044\054" +
    "\045\053\046\047\047\051\050\052\001\002\000\026\004" +
    "\uffc1\005\uffc1\011\uffc1\016\uffc1\025\uffc1\044\054\045\053" +
    "\046\047\047\051\050\052\001\002\000\026\004\uffc0\005" +
    "\uffc0\011\uffc0\016\uffc0\025\uffc0\044\054\045\053\046\047" +
    "\047\051\050\052\001\002\000\026\004\uffbf\005\uffbf\011" +
    "\uffbf\016\uffbf\025\uffbf\044\054\045\053\046\047\047\051" +
    "\050\052\001\002\000\014\004\uffc5\005\uffc5\011\uffc5\016" +
    "\uffc5\025\uffc5\001\002\000\022\006\101\023\033\024\103" +
    "\047\037\050\035\051\045\052\026\053\041\001\002\000" +
    "\022\006\101\023\033\024\103\047\037\050\035\051\045" +
    "\052\026\053\041\001\002\000\014\004\123\005\uffc2\011" +
    "\uffc2\016\uffc2\025\uffc2\001\002\000\014\004\uffc3\005\uffc3" +
    "\011\uffc3\016\uffc3\025\uffc3\001\002\000\014\004\uffc4\005" +
    "\uffc4\011\uffc4\016\uffc4\025\uffc4\001\002\000\020\012\022" +
    "\014\027\021\034\023\033\026\031\030\020\052\026\001" +
    "\002\000\024\012\uffda\014\uffda\015\132\021\uffda\023\uffda" +
    "\026\uffda\030\uffda\031\uffda\052\uffda\001\002\000\020\012" +
    "\022\014\027\021\034\023\033\026\031\030\020\052\026" +
    "\001\002\000\024\012\uffdd\014\uffdd\015\uffdd\021\uffdd\023" +
    "\uffdd\026\uffdd\030\uffdd\031\uffdd\052\uffdd\001\002\000\024" +
    "\012\uffd9\014\uffd9\015\uffd9\021\uffd9\023\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\052\uffd9\001\002\000\020\023\033\024\044" +
    "\047\037\050\035\051\045\052\026\053\041\001\002\000" +
    "\016\026\137\044\054\045\053\046\047\047\051\050\052" +
    "\001\002\000\024\012\uffe0\014\uffe0\015\uffe0\021\uffe0\023" +
    "\uffe0\026\uffe0\030\uffe0\031\uffe0\052\uffe0\001\002\000\010" +
    "\004\123\005\124\011\141\001\002\000\020\012\022\014" +
    "\027\021\034\023\033\026\031\030\020\052\026\001\002" +
    "\000\024\012\uffdc\014\uffdc\015\uffdc\021\uffdc\023\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\052\uffdc\001\002\000\004\027\147" +
    "\001\002\000\006\027\ufff7\034\145\001\002\000\004\023" +
    "\144\001\002\000\004\027\ufff8\001\002\000\006\007\151" +
    "\010\153\001\002\000\004\026\160\001\002\000\016\013" +
    "\ufff5\022\ufff5\025\ufff5\026\ufff5\030\ufff5\032\ufff5\001\002" +
    "\000\006\026\ufff2\032\ufff2\001\002\000\016\013\ufff6\022" +
    "\ufff6\025\ufff6\026\ufff6\030\ufff6\032\ufff6\001\002\000\006" +
    "\026\ufff4\032\155\001\002\000\004\051\156\001\002\000" +
    "\004\033\157\001\002\000\010\025\ufff3\026\ufff3\032\ufff3" +
    "\001\002\000\010\013\uffe7\022\uffe7\030\uffe7\001\002\000" +
    "\010\013\uffe8\022\uffe8\030\uffe8\001\002\000\004\024\163" +
    "\001\002\000\010\020\164\023\144\025\ufffb\001\002\000" +
    "\004\023\144\001\002\000\004\025\201\001\002\000\004" +
    "\027\172\001\002\000\006\025\ufffc\026\170\001\002\000" +
    "\010\020\164\023\144\025\ufffb\001\002\000\004\025\ufffd" +
    "\001\002\000\006\007\151\010\153\001\002\000\006\025" +
    "\ufff9\026\ufff9\001\002\000\010\025\ufff2\026\ufff2\032\176" +
    "\001\002\000\010\025\uffee\026\uffee\032\155\001\002\000" +
    "\004\033\177\001\002\000\010\025\ufff2\026\ufff2\032\ufff2" +
    "\001\002\000\010\025\uffef\026\uffef\032\155\001\002\000" +
    "\004\027\202\001\002\000\010\007\151\010\153\017\203" +
    "\001\002\000\012\013\ufff0\022\ufff0\026\ufff0\030\ufff0\001" +
    "\002\000\012\013\ufff1\022\ufff1\026\ufff1\030\ufff1\001\002" +
    "\000\012\013\ufffe\022\ufffe\026\ufffe\030\ufffe\001\002\000" +
    "\004\027\207\001\002\000\006\007\151\010\153\001\002" +
    "\000\006\025\ufffa\026\ufffa\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\007\001\001\000\016\003\016\004\013\006\010\007" +
    "\011\020\014\021\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\007\001\001\000" +
    "\002\001\001\000\004\013\142\001\001\000\002\001\001" +
    "\000\004\022\020\001\001\000\012\007\023\023\022\024" +
    "\024\025\031\001\001\000\012\024\035\025\037\026\137" +
    "\030\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\035\025\037" +
    "\026\077\030\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\035" +
    "\025\037\030\041\032\042\001\001\000\010\024\035\025" +
    "\037\030\066\001\001\000\002\001\001\000\010\024\035" +
    "\025\037\030\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\035" +
    "\025\037\030\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\035\025\037\030\060\001\001\000\002" +
    "\001\001\000\010\024\035\025\037\030\057\001\001\000" +
    "\010\024\035\025\037\030\056\001\001\000\010\024\035" +
    "\025\037\030\055\001\001\000\010\024\035\025\037\030" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\035\025\037\030\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\035\025\037\027\070\030\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\035\025\037\027\074\030\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\035\025\037\026\126\030\101\001\001" +
    "\000\002\001\001\000\012\024\035\025\037\026\103\030" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\035\025\037\030\120\001\001\000\010\024\035\025" +
    "\037\030\117\001\001\000\010\024\035\025\037\030\116" +
    "\001\001\000\010\024\035\025\037\030\115\001\001\000" +
    "\010\024\035\025\037\030\114\001\001\000\010\024\035" +
    "\025\037\030\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\035\025" +
    "\037\026\125\030\101\001\001\000\012\024\035\025\037" +
    "\026\124\030\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\023\023\130\024\024" +
    "\025\031\001\001\000\004\031\132\001\001\000\012\007" +
    "\023\023\133\024\024\025\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\035\025\037\030\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\023\023\141\024\024\025\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\145\001\001\000\002\001\001\000\006\015\151\016" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\164\011\166\013\165\001\001\000\004\013\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\170\011\166\013\165\001\001\000\002\001\001" +
    "\000\006\014\172\015\173\001\001\000\002\001\001\000" +
    "\004\017\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\204\015\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\207\015\173\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info)
    {
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception
    {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond ::= expr GEQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond ::= expr LEQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond ::= expr GTHAN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond ::= expr LTHAN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond ::= expr NEQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond ::= expr EQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= cond OR cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= cond AND cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond ::= NOT cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= LPAREN cond RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr MOD expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr DIV expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= MINUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= PLUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= l_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprs ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprs ::= expr COMMA exprs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // func_call ::= IDENTIFIER LPAREN exprs RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // func_call ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block ::= LCURLY stmts RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_opt ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_opt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_opt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // else_opt ::= ELSE stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_opt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_opt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= RETURN expr_opt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= WHILE cond DO stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= IF cond THEN stmt else_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= func_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= l_value SPACER expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // l_value ::= l_value LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // l_value ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // l_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmts ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmts ::= stmts stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_def ::= VAR ids COLON type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // func_decl ::= header SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // local_def ::= var_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // local_def ::= func_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // local_def ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // local_defs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_defs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // local_defs ::= local_defs local_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_defs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fpar_type ::= data_type int_consts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fpar_type ::= data_type LBRACKET RBRACKET int_consts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ret_type ::= NOTHING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ret_type ::= data_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // int_consts ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_consts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // int_consts ::= int_consts LBRACKET INTEGER_LITERAL RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_consts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= data_type int_consts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ids ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ids ::= IDENTIFIER COMMA ids 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fpar_def ::= ids COLON fpar_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_def",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fpar_def ::= REF ids COLON fpar_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_def",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fpar_defs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fpar_defs ::= fpar_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fpar_defs ::= fpar_def SEMICOLON fpar_defs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpar_defs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= FUN IDENTIFIER LPAREN fpar_defs RPAREN COLON ret_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_def ::= header local_defs block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

