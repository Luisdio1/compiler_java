import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ast.*;

parser code
{:
    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info)
    {
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception
    {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }
:};

terminal AND, OR, NOT;
terminal PUTS;
terminal CHAR;
terminal INT;
terminal DO, WHILE;
terminal FUN;
terminal IF, ELSE, THEN;
terminal NOTHING;
terminal REF;
terminal RETURN;
terminal VAR;
terminal java.lang.String IDENTIFIER;       // name

terminal LPAREN, RPAREN, SEMICOLON, COLON, LCURLY, RCURLY, LBRACKET, RBRACKET, COMMA;
terminal EQ, NEQ, LEQ, GEQ, LTHAN, GTHAN;
terminal SPACER;
terminal TIMES, DIV, MOD;
terminal PLUS, MINUS;

terminal java.lang.Integer    INTEGER_LITERAL;
terminal java.lang.String     STRING_LITERAL;
terminal java.lang.String     CHAR_LITERAL;

non terminal Program program;
non terminal Definition func_def;
non terminal Definition header;
non terminal Definition fpar_def;
non terminal List<Definition> fpar_defs;
non terminal Type data_type;
non terminal Type ret_type;
non terminal String fpar_type;
non terminal Definition local_def;
non terminal List<Definition> local_defs;
non terminal Definition var_def;
non terminal Definition func_decl;
non terminal Statement stmt;
non terminal List<Statement> stmts;
non terminal Statement block;
non terminal Expression func_call;
non terminal Expression l_value;
non terminal List<String> ids;
non terminal List<Integer> arrays;
non terminal Expression expr;
non terminal List<Expression> exprs;
non terminal Condition cond;

precedence left OR;
precedence left AND;
precedence nonassoc NOT;
precedence nonassoc EQ, GTHAN, LTHAN, LEQ, GEQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left THEN;
precedence left ELSE;

start with program;
      
program ::= func_def:fd
          {:
            RESULT = new Program(fd);
            RESULT.setLine(fdleft);
            RESULT.setColumn(fdright);
          :} 
          ;

func_def ::= header:h local_defs:ls block:b
          {:
            RESULT = new FunctionDefinition(h, ls, b);
            RESULT.setLine(hleft);
            RESULT.setColumn(hright);
          :}
          ;

header ::= FUN:f IDENTIFIER:i LPAREN:lp fpar_defs:fds RPAREN COLON ret_type:rt
          {:
            RESULT = new HeaderDefinition(rt, i, fds);
            RESULT.setLine(fleft);
            RESULT.setColumn(fright);
          :}
          ;

fpar_defs ::= fpar_def:fd fpar_defs:fds
            {:
              fds.add(fd);
              RESULT = fds;
            :}
            | SEMICOLON fpar_def:fd fpar_defs:fds
            {:
              RESULT = new ArrayList<Definition>();
              RESULT.add(fd);
            :}
            | /* empty */
            {:
              RESULT = new ArrayList<Definition>();
            :}
            ;

fpar_def ::= REF:r ids:is COLON fpar_type:ft
            {:
              RESULT = new FunctionParameterDefinition(ft, is, true);
              RESULT.setLine(rleft);
              RESULT.setColumn(rright);
            :}
           | ids:is COLON fpar_type:ft   
            {:
              RESULT = new FunctionParameterDefinition(ft, is, false);
              RESULT.setLine(isleft);
              RESULT.setColumn(isright);
            :}
           ;

ids      ::= IDENTIFIER:i ids:is
           {:
              is.add(i);
              RESULT = is;
           :}
           | COMMA IDENTIFIER:i ids:is
            {:
                RESULT = new ArrayList<String>();
                RESULT.add(i);
            :}
           | /* empty */
            {:
                RESULT = new ArrayList<String>();
            :}
           ;

ret_type ::= data_type:dt 
            {:
                RESULT = dt;
            :}
           | NOTHING:n
            {:
                RESULT = Type.NOTHING;
            :}
           ;

fpar_type ::= data_type:dt LBRACKET RBRACKET arrays:as 
            {:
                ArrayType o = new ArrayType(dt, as, true);
                RESULT = o.getArrayType();
            :}
            | data_type:dt arrays:as
            {:
                ArrayType o = new ArrayType(dt, as, false);
                RESULT = o.getArrayType();
            :}
            ;

local_def ::= func_def:fd
            {:
              RESULT = fd;
            :}
            | func_decl:fl
            {:
              RESULT = fl;
            :}
            | var_def:vd
            {:
              RESULT = vd;
            :}
            ;

local_defs ::= local_def:ld local_defs:lds
            {:
              lds.add(ld);
              RESULT = lds;
            :}
            | /* empty */
            {:
              RESULT = new ArrayList<Definition>();
            :}
            ;

var_def ::= VAR:v ids:is COLON data_type:dt arrays:as SEMICOLON 
          {:
            RESULT = new VariableDefinition(is, dt, as);
            RESULT.setLine(vleft);
            RESULT.setColumn(vright);
          :}
          ;

data_type ::= INT:i
            {:
              RESULT = Type.INT;
            :}
            | CHAR:c
            {:
              RESULT = Type.CHAR;
            :}
            ; 

arrays    ::= /* empty */
            {:
              RESULT = new ArrayList<Integer>();
            :}
            | LBRACKET:lb INTEGER_LITERAL:l RBRACKET arrays:as
            {:
              as.add(l);
              RESULT = as;
            :}
            ;

func_decl ::= header:h SEMICOLON 
            {:
                RESULT = h;
            :}
            ;

stmt ::= SEMICOLON:s
         {:
            RESULT = new EmptyStatement();
            RESULT.setLine(sleft);
            RESULT.setColumn(sright);
         :}
       | l_value:lv SPACER expr:e SEMICOLON
         {:
            RESULT = new SpacerStatement(lv, e);
            RESULT.setLine(lvleft);
            RESULT.setColumn(lvright);
         :}
       | block:b
         {:
            RESULT = b;
         :}
       | func_call:fc SEMICOLON
         {:
            RESULT = new FunctionCallStatement(fc);
            RESULT.setLine(fcleft);
            RESULT.setColumn(fcright);
         :}
       | PUTS:p LPAREN expr:e RPAREN SEMICOLON
         {:
            RESULT = new PutsStatement(e);
            RESULT.setLine(pleft);
            RESULT.setColumn(pright);
         :}
       | IF:i cond:c THEN stmt:s 
         {:
            RESULT = new IfStatement(c, s);
            RESULT.setLine(ileft);
            RESULT.setColumn(iright);
         :}
       | IF:i cond:c THEN stmt:s1 ELSE stmt:s2
         {:
            RESULT = new IfElseStatement(c, s1, s2);
            RESULT.setLine(ileft);
            RESULT.setColumn(iright);
         :}
       | WHILE:w cond:c DO stmt:s
         {:
            RESULT = new WhileStatement(c, s);
            RESULT.setLine(wleft);
            RESULT.setColumn(wright);
         :}
       | RETURN:r expr:e SEMICOLON
         {:
            RESULT = new ReturnStatement(e);
            RESULT.setLine(rleft);
            RESULT.setColumn(rright);
         :}
       | RETURN:r SEMICOLON
         {:
            RESULT = new ReturnStatement();
            RESULT.setLine(rleft);
            RESULT.setColumn(rright);
         :}
       ;

block ::= LCURLY:lc stmts:ss RCURLY 
        {:
            RESULT = new StatementGroup(ss);
        :}
        ;

stmts ::= stmt:s stmts:ss
        {:
            ss.add(s);
            RESULT = ss;
        :}
        | /* empty */
        {:
            RESULT = new ArrayList<Statement>();
        :}
        ;

func_call ::= IDENTIFIER:i LPAREN:lp expr:e exprs:es RPAREN
            {:
                RESULT = new FunctionCallExpression(i, e, es);
                RESULT.setLine(ileft);
                RESULT.setColumn(iright);
            :}
           ;

exprs ::= COMMA expr:e exprs:es
        {:
            es.add(e);
            RESULT = es;
        :}
        | /* empty */
        {:
            RESULT = new ArrayList<Expression>();
        :}
        ;

l_value ::= IDENTIFIER:i 
          {:
                RESULT = new IdentifierExpression(i);
          :}
          | STRING_LITERAL:s
          {:
                RESULT = new StringLiteralExpression(s);
          :}
          | l_value:lv LBRACKET expr:e RBRACKET
          {:
                RESULT = new LValueExpression(lv, e);
          :}
          ;

expr ::= INTEGER_LITERAL:l
         {:
             RESULT = new IntegerLiteralExpression(l);
             RESULT.setLine(lleft);
             RESULT.setColumn(lright);
         :}
       | CHAR_LITERAL:c
         {:
             RESULT = new CharLiteralExpression(c);
             RESULT.setLine(cleft);
             RESULT.setColumn(cright);
         :}
       | l_value:lv
         {:
             RESULT = lv;
         :}
       | func_call:fc
         {:
             RESULT = fc;
         :}
       | LPAREN:lp expr:e RPAREN
         {:
             RESULT = new ParenthesisExpression(e);
             RESULT.setLine(lpleft);
             RESULT.setColumn(lpright);
         :}
       | PLUS:p expr:e
         {:
             RESULT = new UnaryExpression(Operator.PLUS, e);
             RESULT.setLine(pleft);
             RESULT.setColumn(pright);
         :}
       | MINUS:m expr:e
         {:
             RESULT = new UnaryExpression(Operator.MINUS, e);
             RESULT.setLine(mleft);
             RESULT.setColumn(mright);
         :}
       | expr:e1 PLUS expr:e2
         {:
             RESULT = new BinaryExpression(Operator.PLUS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 MINUS expr:e2
         {:
             RESULT = new BinaryExpression(Operator.MINUS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 TIMES expr:e2
         {:
             RESULT = new BinaryExpression(Operator.TIMES, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 DIV expr:e2
         {:
             RESULT = new BinaryExpression(Operator.DIV, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 MOD expr:e2
         {:
             RESULT = new BinaryExpression(Operator.MOD, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       ;

cond ::= LPAREN:lp cond:c RPAREN
         {:
             RESULT = new ParenthesisCondition(c);
             RESULT.setLine(lpleft);
             RESULT.setColumn(lpright);
         :}
       | NOT:n cond:c
         {:
             RESULT = new UnaryCondition(Operator.NOT, c);
             RESULT.setLine(nleft);
             RESULT.setColumn(nright);
         :}
       | cond:c1 AND cond:c2
         {:
             RESULT = new BinaryCondition(Operator.AND, c1, c2);
             RESULT.setLine(c1left);
             RESULT.setColumn(c1right);
         :}
       | cond:c1 OR cond:c2
         {:
             RESULT = new BinaryCondition(Operator.OR, c1, c2);
             RESULT.setLine(c1left);
             RESULT.setColumn(c1right);
         :}
       | expr:e1 EQ expr:e2
         {:
             RESULT = new BinaryCondition(Operator.EQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 NEQ expr:e2
         {:
             RESULT = new BinaryCondition(Operator.NEQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 LTHAN expr:e2
         {:
             RESULT = new BinaryCondition(Operator.LTHAN, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 GTHAN expr:e2
         {:
             RESULT = new BinaryCondition(Operator.GTHAN, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 LEQ expr:e2
         {:
             RESULT = new BinaryCondition(Operator.LEQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | expr:e1 GEQ expr:e2
         {:
             RESULT = new BinaryCondition(Operator.GEQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       ;